# -*- coding: utf-8 -*-
"""Submission_Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgWMSeINPOJnp6kUs-qb_pONTwWiXuGf
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('openweatherdata-denpasar-1990-2020v0.1.csv')
df.tail()

# merubah format tanggal
df['dt_iso'] = pd.to_datetime(df['dt_iso'])

# Memisahkan date dengan time
df['date'] = [d.date() for d in df['dt_iso']]
df['time'] = [d.time() for d in df['dt_iso']]

# Membuang kolom yang tidak digunakan
df.drop(['dt_iso','timezone','city_name','lat','lon','temp_min','temp_max','pressure','humidity','wind_speed','wind_deg','rain_1h','rain_3h','rain_6h','rain_12h','rain_24h',
         'rain_today','snow_1h','snow_3h','snow_6h','snow_12h','snow_24h','snow_today','clouds_all','weather_id','weather_main','weather_description','weather_icon','time'],
        axis = 1, inplace = True)

# Plotting dataset 'temp' and date
plt.figure(figsize=(20,5))
plt.plot(df['date'], df['temp'])
plt.title('Temperature Suhu di Denpasar', fontsize=20);

MAE = (df['temp'].max() - df['temp'].min()) * (10/100)
MAE

D = df['date'].values
T = df['temp'].values

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

from sklearn.model_selection import train_test_split

X_latih, X_uji, y_latih, y_uji = train_test_split(T, D, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(X_latih), len(X_uji))

# model
from keras.layers import Dense, LSTM

data_latih_x = windowed_dataset(X_latih, window_size=60, batch_size=100, shuffle_buffer=5000)
data_uji_x = windowed_dataset(X_uji, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
model.summary()

# callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < MAE):
      self.model.stop_training = True
      print("\nUdah dapet nilai MAE < 10% nih !!!")
callbacks = myCallback()

tf.keras.backend.set_floatx('float64')
history = model.fit(data_latih_x ,epochs=20, validation_data=data_uji_x, callbacks=[callbacks])

# membuat plot berdasarkan nilai mae
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# plot of loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()